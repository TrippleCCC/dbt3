#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2002-2008 Open Source Development Labs, Inc.
#               2002-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.

DIR=`dirname $0`
. ${DIR}/pgsql_profile || exit 1

function analyze_table {
	TABLENAME=$1
${PSQL} << __EOF__
	ANALYZE ${TABLENAME};
__EOF__
}

function create_q2_1_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q2_1 (
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment,
	p_size,
	p_type,
	r_name,
	ps_supplycost,
	ps_suppkey,
	n_nationkey,
	r_regionkey
)
AS
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment,
	p_size,
	p_type,
	r_name,
	ps_supplycost,
	ps_suppkey,
	n_nationkey,
	r_regionkey
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey;

CREATE INDEX ON q2_1 (reverse(p_type), p_size, r_name);
ANALYZE q2_1;
__EOF__
}

function create_q2_2_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q2_2 (
	ps_supplycost,
	ps_partkey,
	s_suppkey,
	s_nationkey,
	n_regionkey,
	r_name
)
AS
select
	min(ps_supplycost),
	ps_partkey,
	s_suppkey,
	s_nationkey,
	n_regionkey,
	r_name
from
	partsupp,
	supplier,
	nation,
	region
where
	s_suppkey = ps_suppkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
GROUP BY ps_partkey, s_suppkey, s_nationkey, n_regionkey, r_name;

CREATE INDEX ON q2_2 (r_name);
ANALYZE q2_2;
__EOF__
}

function create_q2_matview {
	create_q2_1_matview &
	create_q2_2_matview &
	wait
}

function create_q3_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q3 (
	l_orderkey,
	l_extendedprice,
	l_discount,
	o_orderdate,
	o_shippriority,
	c_mktsegment,
	l_shipdate
)
AS
select
	l_orderkey,
	l_extendedprice,
	l_discount,
	o_orderdate,
	o_shippriority,
	c_mktsegment,
	l_shipdate
from
	customer,
	orders,
	lineitem
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
group by
	l_orderkey,
	l_extendedprice,
	l_discount,
	o_orderdate,
	o_shippriority,
	c_mktsegment,
	l_shipdate;

CREATE INDEX ON q3 (c_mktsegment);
ANALYZE q3;
__EOF__
}

function create_q4_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q4 (
	l_orderkey
)
AS
select
	l_orderkey
from
	lineitem
where
	l_commitdate < l_receiptdate;

CREATE INDEX ON q4 (l_orderkey);
ANALYZE q4;
__EOF__
}

function create_q5_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q5 (
	n_name,
	l_extendedprice,
	l_discount,
	r_name,
	o_orderdate
)
AS
select
	n_name,
	l_extendedprice,
	l_discount,
	r_name,
	o_orderdate
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey;

CREATE INDEX ON q5 (r_name);
ANALYZE q5;
__EOF__
}

function create_q7_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q7 (
	supp_nation,
	cust_nation,
	l_year,
	volume,
	l_shipdate
)
AS
select
	n1.n_name as supp_nation,
	n2.n_name as cust_nation,
	extract(year from l_shipdate) as l_year,
	l_extendedprice * (1 - l_discount) as volume,
	l_shipdate
from
	supplier,
	lineitem,
	orders,
	customer,
	nation n1,
	nation n2
where
	s_suppkey = l_suppkey
	and o_orderkey = l_orderkey
	and c_custkey = o_custkey
	and s_nationkey = n1.n_nationkey
	and c_nationkey = n2.n_nationkey
	and l_shipdate between date '1995-01-01' and date '1996-12-31';

CREATE INDEX ON q7 (supp_nation);
CREATE INDEX ON q7 (cust_nation);
__EOF__
}

function create_q8_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q8 (
	o_year,
	l_extendedprice,
	l_discount,
	nation,
	r_name,
	p_type
)
AS
select
	extract(year from o_orderdate),
	l_extendedprice,
	l_discount,
	n2.n_name,
	r_name,
	p_type
from
	part,
	supplier,
	lineitem,
	orders,
	customer,
	nation n1,
	nation n2,
	region
where
	p_partkey = l_partkey
	and s_suppkey = l_suppkey
	and l_orderkey = o_orderkey
	and o_custkey = c_custkey
	and c_nationkey = n1.n_nationkey
	and n1.n_regionkey = r_regionkey
	and s_nationkey = n2.n_nationkey
	and o_orderdate between date '1995-01-01' and date '1996-12-31';

CREATE INDEX ON q8 (p_type, r_name);
ANALYZE q8;
__EOF__
}

function create_q9_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q9 (
	nation,
	o_year,
	l_extendedprice,
	l_discount,
	ps_supplycost,
	l_quantity,
	p_name
)
AS
select
	n_name,
	extract(year from o_orderdate),
	l_extendedprice,
	l_discount,
	ps_supplycost,
	l_quantity,
	p_name
from
	part,
	supplier,
	lineitem,
	partsupp,
	orders,
	nation
where
	s_suppkey = l_suppkey
	and ps_suppkey = l_suppkey
	and ps_partkey = l_partkey
	and p_partkey = l_partkey
	and o_orderkey = l_orderkey
	and s_nationkey = n_nationkey;
__EOF__
}

function create_q10_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q10 (
	c_custkey,
	c_name,
	l_extendedprice,
	l_discount,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment,
	o_orderdate
)
AS
select
	c_custkey,
	c_name,
	l_extendedprice,
	l_discount,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment,
	o_orderdate
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	l_extendedprice,
	l_discount,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment,
	o_orderdate;

CREATE INDEX ON q10(o_orderdate);
ANALYZE q10;
__EOF__
}

function create_q11_1_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q11_1 (
	ps_partkey,
	value,
	n_name
)
AS
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value,
	n_name
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
group by
	ps_partkey,
	n_name;

CREATE INDEX ON q11_1 (n_name);
ANALYZE q11_1;
__EOF__
}

function create_q11_2_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q11_2 (
	ps_supplycost,
	ps_availqty,
	n_name
)
AS
select
	ps_supplycost,
	ps_availqty,
	n_name
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey;

CREATE INDEX ON q11_2 (n_name);
ANALYZE q11_2;
__EOF__
}

function create_q11_matview {
	create_q11_1_matview &
	create_q11_2_matview &
	wait
}

function create_q12_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q12 (
	l_shipmode,
	o_orderpriority,
	l_receiptdate
)
AS
select
	l_shipmode,
	o_orderpriority,
	l_receiptdate
from
	orders,
	lineitem
where
	o_orderkey = l_orderkey
	and l_commitdate < l_receiptdate
	and l_shipdate < l_commitdate;

CREATE INDEX ON q12 (l_shipmode, l_receiptdate);
ANALYZE q12;
__EOF__
}

function create_q13_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q13 (
	c_custkey,
	count,
	o_comment
)
AS
select
	c_custkey,
	count(o_orderkey),
	o_comment
from
	customer left outer join orders on
		c_custkey = o_custkey
group by
	c_custkey,
	o_comment;
__EOF__
}

function create_q14_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q14 (
	p_type,
	l_extendedprice,
	l_discount,
	l_shipdate
)
AS
select
	p_type,
	l_extendedprice,
	l_discount,
	l_shipdate
from
	lineitem,
	part
where
	l_partkey = p_partkey;

CREATE INDEX ON q14(l_shipdate);
ANALYZE q14;
__EOF__
}

function create_q16_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q16 (
	p_brand,
	p_type,
	p_size,
	supplier_cnt
)
AS
select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	partsupp,
	part
where
	p_partkey = ps_partkey
	and ps_suppkey not in (
		select
			s_suppkey
		from
			supplier
		where
			s_comment like '%Customer%Complaints%'
	)
group by
	p_brand,
	p_type,
	p_size;

CREATE INDEX ON q16(p_size, p_brand);
ANALYZE q16;
__EOF__
}

function create_q17_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q17 (
	l_extendedprice,
	p_brand,
	p_container
)
AS
select
	l_extendedprice,
	p_brand,
	p_container
from
	lineitem,
	part
where
	p_partkey = l_partkey
	and l_quantity < (
		select
			0.2 * avg(l_quantity)
		from
			lineitem
		where
			l_partkey = p_partkey
	);
__EOF__
}

function create_q18_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q18 (
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	l_quantity
)
AS
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	l_quantity
from
	customer,
	orders,
	lineitem
where
	c_custkey = o_custkey
	and o_orderkey = l_orderkey
__EOF__
}

function create_q19_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q19 (
	l_extendedprice,
	l_discount,
	p_container,
	p_size
)
AS
select
	l_extendedprice,
	l_discount,
	p_container,
	p_size
from
	lineitem,
	part
where
		p_partkey = l_partkey
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG', 'MED BAG', 'MED BOX', 'MED PKG', 'MED PACK', 'LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON';
__EOF__
}

function create_q20_1_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q20_1 (
	s_name,
	s_address,
	s_suppkey
)
AS
select
	s_name,
	s_address,
	s_suppkey
from
	supplier,
	nation
where
	s_nationkey = n_nationkey;
__EOF__
}

function create_q20_2_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q20_2 (
	ps_suppkey,
	p_name
)
AS
select
	distinct (ps_suppkey),
	p_name
from
	partsupp,
	part
where
	ps_partkey=p_partkey;
__EOF__
}

function create_q20_matview {
	create_q20_1_matview &
	create_q20_2_matview &
	wait
}

function create_q21_matview {
	${PSQL} << __EOF__
CREATE MATERIALIZED VIEW q21 (
	s_name,
	numwait,
	l_orderkey,
	l_suppkey,
	n_name
)
AS
select
	s_name,
	count(*) as numwait,
	l_orderkey,
	l_suppkey,
	n_name
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and s_nationkey = n_nationkey
group by
	s_name, l_orderkey, l_suppkey, n_name;
__EOF__
}

USE_TABLESPACES=0
WORKLOAD="H"
while getopts "l:Rt" OPT; do
	case ${OPT} in
	l)
		PORT=${OPTARG}
		;;
	R)
		WORKLOAD="R"
		;;
	t)
		USE_TABLESPACES=1
		;;
	esac
done

if [ ! "x${PORT}" = "x" ]; then
	PORTARG="-p ${PORT}"
fi

if [ -z ${DBNAME} ]; then
	echo "DBNAME not defined."
	exit 1
fi

PSQL="psql -v ON_ERROR_STOP=1 -X -p ${DBPORT} -d ${SID}"

if [ ${USE_TABLESPACES} -eq 1 ];then
	TS_PK_SUPPLIER_DIR="${TSDIR}/pk_supplier/ts"
	TS_PK_PART_DIR="${TSDIR}/pk_part/ts"
	TS_PK_PARTSUPP_DIR="${TSDIR}/pk_partsupp/ts"
	TS_PK_CUSTOMER_DIR="${TSDIR}/pk_customer/ts"
	TS_PK_ORDERS_DIR="${TSDIR}/pk_orders/ts"
	TS_PK_LINEITEM_DIR="${TSDIR}/pk_lineitem/ts"
	TS_PK_NATION_DIR="${TSDIR}/pk_nation/ts"
	TS_PK_REGION_DIR="${TSDIR}/pk_region/ts"

	TS_I_L_SHIPDATE_DIR="${TSDIR}/i_l_shipdate/ts"
	TS_I_L_SUPPKEY_PARTKEY_DIR="${TSDIR}/i_l_suppkey_partkey/ts"
	TS_I_L_PARTKEY_DIR="${TSDIR}/i_l_partkey/ts"
	TS_I_L_SUPPKEY_DIR="${TSDIR}/i_l_suppkey/ts"
	TS_I_L_RECEIPTDATE_DIR="${TSDIR}/i_l_receiptdate/ts"
	TS_I_L_ORDERKEY_DIR="${TSDIR}/i_l_orderkey/ts"
	TS_I_L_ORDERKEY_QUANTITY_DIR="${TSDIR}/i_l_orderkey_quantity/ts"
	TS_I_C_NATIONKEY_DIR="${TSDIR}/i_c_nationkey/ts"
	TS_I_O_ORDERDATE_DIR="${TSDIR}/i_o_orderdate/ts"
	TS_I_O_CUSTKEY_DIR="${TSDIR}/i_o_custkey/ts"
	TS_I_S_NATIONKEY_DIR="${TSDIR}/i_s_nationkey/ts"
	TS_I_PS_PARTKEY_DIR="${TSDIR}/i_ps_partkey/ts"
	TS_I_PS_SUPPKEY_DIR="${TSDIR}/i_ps_suppkey/ts"
	TS_I_N_REGIONKEY_DIR="${TSDIR}/i_n_regionkey/ts"
	TS_I_L_COMMITDATE_DIR="${TSDIR}/i_l_commitdate/ts"

	mkdir -p ${TS_PK_SUPPLIER_DIR}
	mkdir -p ${TS_PK_PART_DIR}
	mkdir -p ${TS_PK_PARTSUPP_DIR}
	mkdir -p ${TS_PK_CUSTOMER_DIR}
	mkdir -p ${TS_PK_ORDERS_DIR}
	mkdir -p ${TS_PK_LINEITEM_DIR}
	mkdir -p ${TS_PK_NATION_DIR}
	mkdir -p ${TS_PK_REGION_DIR}

	mkdir -p ${TS_I_L_SHIPDATE_DIR}
	mkdir -p ${TS_I_L_SUPPKEY_PARTKEY_DIR}
	mkdir -p ${TS_I_L_PARTKEY_DIR}
	mkdir -p ${TS_I_L_SUPPKEY_DIR}
	mkdir -p ${TS_I_L_RECEIPTDATE_DIR}
	mkdir -p ${TS_I_L_ORDERKEY_DIR}
	mkdir -p ${TS_I_L_ORDERKEY_QUANTITY_DIR}
	mkdir -p ${TS_I_C_NATIONKEY_DIR}
	mkdir -p ${TS_I_O_ORDERDATE_DIR}
	mkdir -p ${TS_I_O_CUSTKEY_DIR}
	mkdir -p ${TS_I_S_NATIONKEY_DIR}
	mkdir -p ${TS_I_PS_PARTKEY_DIR}
	mkdir -p ${TS_I_PS_SUPPKEY_DIR}
	mkdir -p ${TS_I_N_REGIONKEY_DIR}
	mkdir -p ${TS_I_L_COMMITDATE_DIR}

	TS_PK_SUPPLIER="TABLESPACE dbt3_pk_supplier"
	TS_PK_PART="TABLESPACE dbt3_pk_part"
	TS_PK_PARTSUPP="TABLESPACE dbt3_pk_partsupp"
	TS_PK_CUSTOMER="TABLESPACE dbt3_pk_customer"
	TS_PK_ORDERS="TABLESPACE dbt3_pk_orders"
	TS_PK_LINEITEM="TABLESPACE dbt3_pk_lineitem"
	TS_PK_NATION="TABLESPACE dbt3_pk_nation"
	TS_PK_REGION="TABLESPACE dbt3_pk_region"

	TS_I_L_SHIPDATE="TABLESPACE dbt3_i_l_shipdate"
	TS_I_L_SUPPKEY_PARTKEY="TABLESPACE dbt3_i_l_suppkey_partkey"
	TS_I_L_PARTKEY="TABLESPACE dbt3_i_l_partkey"
	TS_I_L_SUPPKEY="TABLESPACE dbt3_i_l_suppkey"
	TS_I_L_RECEIPTDATE="TABLESPACE dbt3_i_l_receiptdate"
	TS_I_L_ORDERKEY="TABLESPACE dbt3_i_l_orderkey"
	TS_I_L_ORDERKEY_QUANTITY="TABLESPACE dbt3_i_l_orderkey_quantity"
	TS_I_C_NATIONKEY="TABLESPACE dbt3_i_c_nationkey"
	TS_I_O_ORDERDATE="TABLESPACE dbt3_i_o_orderdate"
	TS_I_O_CUSTKEY="TABLESPACE dbt3_i_o_custkey"
	TS_I_S_NATIONKEY="TABLESPACE dbt3_i_s_nationkey"
	TS_I_PS_PARTKEY="TABLESPACE dbt3_i_ps_partkey"
	TS_I_PS_SUPPKEY="TABLESPACE dbt3_i_ps_suppkey"
	TS_I_N_REGIONKEY="TABLESPACE dbt3_i_n_regionkey"
	TS_I_L_COMMITDATE="TABLESPACE dbt3_i_l_commitdate"

	${PSQL} -c "CREATE ${TS_PK_SUPPLIER} LOCATION '${TS_PK_SUPPLIER_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_PART} LOCATION '${TS_PK_PART_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_PARTSUPP} LOCATION '${TS_PK_PARTSUPP_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_CUSTOMER} LOCATION '${TS_PK_CUSTOMER_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_ORDERS} LOCATION '${TS_PK_ORDERS_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_LINEITEM} LOCATION '${TS_PK_LINEITEM_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_NATION} LOCATION '${TS_PK_NATION_DIR}'";
	${PSQL} -c "CREATE ${TS_PK_REGION} LOCATION '${TS_PK_REGION_DIR}'";

	${PSQL} -c "CREATE ${TS_I_L_SHIPDATE} LOCATION '${TS_I_L_SHIPDATE_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_SUPPKEY_PARTKEY} LOCATION '${TS_I_L_SUPPKEY_PARTKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_PARTKEY} LOCATION '${TS_I_L_PARTKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_SUPPKEY} LOCATION '${TS_I_L_SUPPKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_RECEIPTDATE} LOCATION '${TS_I_L_RECEIPTDATE_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_ORDERKEY} LOCATION '${TS_I_L_ORDERKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_ORDERKEY_QUANTITY} LOCATION '${TS_I_L_ORDERKEY_QUANTITY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_C_NATIONKEY} LOCATION '${TS_I_C_NATIONKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_O_ORDERDATE} LOCATION '${TS_I_O_ORDERDATE_DIR}'";
	${PSQL} -c "CREATE ${TS_I_O_CUSTKEY} LOCATION '${TS_I_O_CUSTKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_S_NATIONKEY} LOCATION '${TS_I_S_NATIONKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_PS_PARTKEY} LOCATION '${TS_I_PS_PARTKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_PS_SUPPKEY} LOCATION '${TS_I_PS_SUPPKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_N_REGIONKEY} LOCATION '${TS_I_N_REGIONKEY_DIR}'";
	${PSQL} -c "CREATE ${TS_I_L_COMMITDATE} LOCATION '${TS_I_L_COMMITDATE_DIR}'";

	TS_PK_SUPPLIER="USING INDEX ${TS_PK_SUPPLIER}"
	TS_PK_PART="USING INDEX ${TS_PK_PART}"
	TS_PK_PARTSUPP="USING INDEX ${TS_PK_PARTSUPP}"
	TS_PK_CUSTOMER="USING INDEX ${TS_PK_CUSTOMER}"
	TS_PK_ORDERS="USING INDEX ${TS_PK_ORDERS}"
	TS_PK_LINEITEM="USING INDEX ${TS_PK_LINEITEM}"
	TS_PK_NATION="USING INDEX ${TS_PK_NATION}"
	TS_PK_REGION="USING INDEX ${TS_PK_REGION}"
fi

${PSQL} -c "
ALTER TABLE supplier
ADD CONSTRAINT pk_supplier PRIMARY KEY (s_suppkey) ${TS_PK_SUPPLIER};
" || exit 1 &

${PSQL} -c "
ALTER TABLE part
ADD CONSTRAINT pk_part PRIMARY KEY (p_partkey) ${TS_PK_PART};
" || exit 1 &

${PSQL} -c "
ALTER TABLE partsupp
ADD CONSTRAINT pk_partsupp PRIMARY KEY (ps_partkey, ps_suppkey) ${TS_PK_PARTSUPP};
" || exit 1 &

${PSQL} -c "
ALTER TABLE customer
ADD CONSTRAINT pk_customer PRIMARY KEY (c_custkey) ${TS_PK_CUSTOMER};
" || exit 1 &

${PSQL} -c "
ALTER TABLE orders
ADD CONSTRAINT pk_orders PRIMARY KEY (o_orderkey) ${TS_PK_ORDERS};
" || exit 1 &

${PSQL} -c "
ALTER TABLE lineitem
ADD CONSTRAINT pk_lineitem PRIMARY KEY (l_orderkey, l_linenumber) ${TS_PK_LINEITEM};
" || exit 1 &

${PSQL} -c "
ALTER TABLE nation
ADD CONSTRAINT pk_nation PRIMARY KEY (n_nationkey) ${TS_PK_NATION};
" || exit 1 &

${PSQL} -c "
ALTER TABLE region
ADD CONSTRAINT pk_region PRIMARY KEY (r_regionkey) ${TS_PK_REGION};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_shipdate
ON lineitem (l_shipdate) ${TS_I_L_SHIPDATE};
" || exit 1  &

${PSQL} -c "
CREATE INDEX i_l_suppkey_partkey
ON lineitem (l_partkey, l_suppkey) ${TS_I_L_SUPPKEY_PARTKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_partkey
ON lineitem (l_partkey) ${TS_I_L_PARTKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_suppkey
ON lineitem (l_suppkey) ${TS_I_L_SUPPKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_receiptdate
ON lineitem (l_receiptdate) ${TS_I_L_RECEIPTDATE};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_orderkey
ON lineitem (l_orderkey) ${TS_I_L_ORDERKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_orderkey_quantity
ON lineitem (l_orderkey, l_quantity) ${TS_I_L_ORDERKEY_QUANTITY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_c_nationkey
ON customer (c_nationkey) ${TS_I_C_NATIONKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_o_orderdate
ON orders (o_orderdate) ${TS_I_O_ORDERDATE};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_o_custkey
ON orders (o_custkey) ${TS_I_O_CUSTKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_s_nationkey
ON supplier (s_nationkey) ${TS_I_S_NATIONKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_ps_partkey
ON partsupp (ps_partkey) ${TS_I_PS_PARTKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_ps_suppkey
ON partsupp (ps_suppkey) ${TS_I_PS_SUPPKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_n_regionkey
ON nation (n_regionkey) ${TS_I_N_REGIONKEY};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_l_commitdate
ON lineitem (l_commitdate) ${TS_I_L_COMMITDATE};
" || exit 1 &

wait

echo "Updating optimizer statistics..."
analyze_table supplier &
analyze_table part &
analyze_table partsupp &
analyze_table customer &
analyze_table orders &
analyze_table lineitem &
analyze_table nation &
analyze_table region &
wait

if [ ${WORKLOAD} = "R" ]; then
	echo "Building materialized views..."
	create_q2_matview &
	create_q3_matview &
	create_q4_matview &
	create_q5_matview &
	create_q7_matview &
	create_q8_matview &
	create_q9_matview &
	create_q10_matview &
	create_q11_matview &
	create_q12_matview &
	create_q13_matview &
	create_q14_matview &
	create_q16_matview &
	create_q17_matview &
	create_q18_matview &
	create_q19_matview &
	create_q20_matview &
	create_q21_matview &
	wait
fi
