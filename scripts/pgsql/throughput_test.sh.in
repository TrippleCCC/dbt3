#!/bin/sh
#
# throughput_test.sh
#
# This file is released under the terms of the Artistic License.  Please see
# the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003 Jenny Zhang & Open Source Development Lab, Inc.
#
# History: June-17-2003 Created by Jenny Zhang
#
# 2004 July 16 : Reworked by Mark Wong
# 2004 September 28 : Turn this into a wrapper script because we don't know
#                     how long the test will execute so we collect stats
#                     until the test is done.  Because of the way things are
#                     run in the background and we wait for processs to
#                     complete, we only want to wait for the processes that
#                     are executing the queries.

SRCDIR=@TOPDIR@

USE_OPROFILE=0

clearprof () {
        sudo /usr/sbin/readprofile -m /boot/System.map -r
}

getprof () {
        mkdir -p $OUTPUT_DIR/prof
        sudo /usr/sbin/readprofile -n -m /boot/System.map -v | sort -grk3,4 > $OUTPUT_DIR/prof/${profname}.prof
}

clearoprof () {
        sudo opcontrol --vmlinux=/boot/vmlinux
        sleep 2
        sudo opcontrol --start-daemon
        sleep 2
        sudo opcontrol --start
        sleep 2
        # If opcontrol ever gets stuck here, sometimes it helps to remove
        # everything in this dir:
        # /var/lib/oprofile
        sudo opcontrol --reset
}

getoprof () {
        mkdir -p $OUTPUT_DIR/oprofile/${profname}/annotate
        sudo opcontrol --dump
        sudo opreport -l -o $OUTPUT_DIR/oprofile/${profname}/oprofile.txt
        sudo opcontrol --stop
        cp -pR /var/lib/oprofile/samples/current $OUTPUT_DIR/oprofile/${profname}/
        sudo opannotate --source --assembly > $OUTPUT_DIR/oprofile/${profname}/assembly.txt 2>&1
        sudo opannotate --source --output-dir=$OUTPUT_DIR/oprofile/${profname}/annotate
        sudo opstack > $OUTPUT_DIR/oprofile/${profname}/call-graph.txt
}

while getopts "e:f:n:o:p:t:y:" opt; do
	case $opt in
	e) explain_analyze=$OPTARG
		;;
	f) scale_factor=$OPTARG
		;;
	o) OUTPUT_DIR=$OPTARG
		;;
	p) db_param=$OPTARG
		;;
	n) num_stream=$OPTARG
		;;
	t) TAG=$OPTARG
		;;
	y) USE_OPROFILE=$OPTARG
		;;
	esac
done

RUNDIR="$OUTPUT_DIR/run"
DBSCRIPTDIR=$SRCDIR/scripts/pgsql
seed_file="$RUNDIR/seed"
parsequery_dir="$SRCDIR/dbdriver/utils"

GTIME="$SRCDIR/dbdriver/utils/gtime"
DBSTATS="$DBSCRIPTDIR/db_stats.sh"
QGEN="$SRCDIR/datagen/dbgen/qgen"

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

bash $DBSCRIPTDIR/stop_db.sh
bash $DBSCRIPTDIR/start_db.sh "$db_param"

s_time=`$GTIME`
bash $DBSCRIPTDIR/record_start.sh -n "PERF${TAG}.THRUPUT"

# Start collecting system statistics. 
bash $SRCDIR/scripts/start_sysstats.sh -o $OUTPUT_DIR -p throughput${TAG}

# Start collecting database statistics.
bash $DBSTATS $SID $OUTPUT_DIR "throughput${TAG}" &

# Start the streams.
bash $DBSCRIPTDIR/throughput_stream_wrapper.sh -f $scale_factor -t $TAG -n $num_stream -e $explain_analyze -o $OUTPUT_DIR || exit 1

# Stop collecting system statistics.
bash $SRCDIR/scripts/stop_sysstats.sh

# no effect
#killall $DBSTATS

bash $DBSCRIPTDIR/record_end.sh -n "PERF${TAG}.THRUPUT"
e_time=`$GTIME`
let "diff_time=$e_time-$s_time"
echo "Stream ${TAG} : Elapsed time for Throughput Test : $diff_time seconds"

# Stop the database after the test.
bash $DBSCRIPTDIR/stop_db.sh

if [ -f /proc/profile ]; then
	profname="Throughput_Test_$TAG"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Throughput_Test_$TAG"
	getoprof
fi

exit 0
