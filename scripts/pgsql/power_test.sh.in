#!/bin/sh
#
# power_test.sh.in
#
# This file is released under the terms of the Artistic License.  Please see
# the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003 Jenny Zhang & Open Source Development Lab, Inc.
#
# Author: Jenny Zhang
# March 2003
#
# 15 July 2004: Reworked by Mark Wong

SRCDIR=@TOPDIR@

clearprof () {
	sudo /usr/sbin/readprofile -m /boot/System.map -r
}

getprof () {
        mkdir -p $OUTPUT_DIR/prof
	sudo /usr/sbin/readprofile -n -m /boot/System.map -v | sort -grk3,4 > $OUTPUT_DIR/prof/${profname}.prof
}

clearoprof () {
	sudo opcontrol --vmlinux=/boot/vmlinux
	sleep 2
	sudo opcontrol --start-daemon
	sleep 2
	sudo opcontrol --start
	sleep 2
	# If opcontrol ever gets stuck here, sometimes it helps to remove
	# everything in this dir:
	# /var/lib/oprofile
	sudo opcontrol --reset
}

getoprof () {
	mkdir -p $OUTPUT_DIR/oprofile/${profname}/annotate
	sudo opcontrol --dump
	sudo opreport -l -o $OUTPUT_DIR/oprofile/${profname}/oprofile.txt
	sudo opcontrol --stop
	cp -pR /var/lib/oprofile/samples/current $OUTPUT_DIR/oprofile/${profname}/
	sudo opannotate --source --assembly > $OUTPUT_DIR/oprofile/${profname}/assembly.txt 2>&1
	sudo opannotate --source --output-dir=$OUTPUT_DIR/oprofile/${profname}/annotate
	sudo opstack > $OUTPUT_DIR/oprofile/${profname}/call-graph.txt
}

EXPLAIN_ANALYZE=0
USE_OPROFILE=0

# process the command line parameters
while getopts "ef:p:o:t:y:" opt; do
	case $opt in
		e) EXPLAIN_ANALYZE=1
			;;
		f) SCALE_FACTOR=$OPTARG
			;;
		o) OUTPUT_DIR=$OPTARG
			;;
		p) db_param=$OPTARG
			;;
		t) TAG=$OPTARG
			;;
		y) USE_OPROFILE=$OPTARG
			;;
		?) echo "Usage: $0 -f <SCALE_FACTOR> [-e EXPLAIN_ANALYZE -p <db_params> -t <tag> -y USE_OPROFILE]"
			exit ;;
		esac
done


SCRIPTDIR=$SRCDIR/scripts
DBSCRIPTDIR=$SRCDIR/scripts/pgsql
parsequery_pgsql_dir="$SRCDIR/dbdriver/utils"

RUNDIR=$OUTPUT_DIR/run
seed_file=$RUNDIR/seed
param_file="$RUNDIR/power_plan.para"
query_file="$RUNDIR/power_plan.sql"
tmp_query_file="$RUNDIR/tmp_power_plan.sql"

GTIME="$SRCDIR/dbdriver/utils/gtime"
DBSTATS="$DBSCRIPTDIR/db_stats.sh"

# Generate queries for the Power test.
$SRCDIR/datagen/dbgen/qgen -c -r `cat $seed_file` -p 0 -s $SCALE_FACTOR -l $param_file -x > $query_file

# Get the EXPLAIN plans for only the SELECT statements.
mkdir -p $RUNDIR/plan
i=1
while [ $i -le 22 ]
do
	if [ $i -ne 15 ]; then
		bash $DBSCRIPTDIR/get_query_plan.sh $SCALE_FACTOR $i $RUNDIR/plan/power_query$i.txt $RUNDIR
	fi
	let "i=$i+1"
done
# Modify query file so that the commands are in one line.
$parsequery_pgsql_dir/parse_query $query_file $tmp_query_file E

bash $DBSCRIPTDIR/stop_db.sh
bash $DBSCRIPTDIR/start_db.sh "$db_param"

# Start collecting system statistics.
bash $SCRIPTDIR/start_sysstats.sh -o $OUTPUT_DIR -p power${TAG}

# Collect database statistics
bash $DBSTATS $SID $OUTPUT_DIR "power${TAG}" &

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

s_time_power=`$GTIME`
bash $DBSCRIPTDIR/record_start.sh -n "PERF${TAG}.POWER"

# Save refresh stream and query results to $OUTPUT_DIR/results.
mkdir -p $OUTPUT_DIR/results

# Refresh Stream 1
echo "`date`: Power Test : Starting Refresh Stream 1" 
s_time=`$GTIME`
bash $DBSCRIPTDIR/record_start.sh -n "PERF${TAG}.POWER.RF1"
bash $DBSCRIPTDIR/run_rf1.sh $SCALE_FACTOR $RUNDIR > $OUTPUT_DIR/results/power.perf${TAG}.rf1.result 2>&1
bash $DBSCRIPTDIR/record_end.sh -n "PERF${TAG}.POWER.RF1"
e_time=`$GTIME`
echo "`date`: Power Test : Refresh Stream 1 completed." 
let "diff_time=$e_time-$s_time"

# Execute the queries.
bash $DBSCRIPTDIR/run_power_query.sh $SCALE_FACTOR $TAG $EXPLAIN_ANALYZE $OUTPUT_DIR || exit 1

# Refresh Stream 2
echo "`date`: Power Test : Starting Refresh Stream 2" 
s_time=`$GTIME`
bash $DBSCRIPTDIR/record_start.sh -n "PERF${TAG}.POWER.RF2"
bash $DBSCRIPTDIR/run_rf2.sh $RUNDIR > $OUTPUT_DIR/results/power.perf${TAG}.rf2.result 2>&1
bash $DBSCRIPTDIR/record_end.sh -n "PERF${TAG}.POWER.RF2"
e_time=`$GTIME`
echo "`date`: Power Test : Refresh Stream 2 completed." 
let "diff_time=$e_time-$s_time"

bash $DBSCRIPTDIR/record_end.sh -n "PERF${TAG}.POWER"
e_time_power=`$GTIME`
echo "`date`: Power Test completed."
let "diff_time=$e_time_power-$s_time_power"
echo "Elapsed time for Power Test : $diff_time seconds"

# Stop collecting system statistics.
bash $SCRIPTDIR/stop_sysstats.sh

#no effect
#killall $DBSTATS

bash $DBSCRIPTDIR/stop_db.sh

if [ -f /proc/profile ]; then
	profname="Power_Test_$TAG"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Power_Test_$TAG"
	getoprof
fi

exit 0
