#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2005-2015 Mark Wong
#               2014-2015 2ndQuadrant, Ltd.
#

write_perf_page()
{
	local FILE=$1
	local DESC=$2

	cat << __EOF__ > $FILE
<html>
<head>
<title>Database Test 3 $DESC Perf Details</title>
</head>
<body>
<h1>Database Test 3 $DESC Perf Details</h1>
__EOF__

	if [ "x$MPP" = "xyes" ]; then
		cat << __EOF__ >> $FILE
Reports are ordered by query number.
__EOF__

		for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $FILE
<h2>$HOST</h2>
<ol>
__EOF__

			for i in `seq 1 22`; do
				cat << __EOF__ >> $FILE
  <li>
    <a href="$i/perf-report-$HOST-q$i.txt.gz">report</a> |
    <a href="$i/perf-annotate-$HOST-q$i.txt.gz">annotated source</a> |
    <a href="$i/perf-trace-$HOST-q$i.txt.gz">trace</a>
  </li>
__EOF__
			done
			cat << __EOF__ >> $FILE
</ol>
__EOF__
		done
	else
		cat << __EOF__ >> $FILE
<h2>$DESC Query</h2>
<ol>
__EOF__
		for i in `seq 1 22`; do
			cat << __EOF__ >> $FILE
  <li>
    <a href="$i/q$i-perf-report.txt.gz">report</a> |
    <a href="$i/q$i-perf-annotate.txt.gz">annotated source</a> |
    <a href="$i/q$i-perf-trace.txt.gz">trace</a>
  </li>
__EOF__
		done

		cat << __EOF__ >> $FILE
</ol>
__EOF__
	fi

	cat << __EOF__ >> $FILE
</body>
</html>
__EOF__
}

gen_db_chart_pages()
{
	for HOST in $HOSTNAMES; do
		local HTMLFILE=$OUTDIR/$HOST-db.html

		cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 $HOST Database Charts</title>
</head>
<body>
<h1>Database Test 3 $HOST Database Charts</h1>
__EOF__

	local FILES=`ls $OUTDIR/db/$HOST/db-stat-*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart="$HOST/`basename $chart`"
			cat << __EOF__ >> $HTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi
	cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__
	done
}

gen_system_chart_pages()
{
	for HOST in $HOSTNAMES; do
		local HTMLFILE=$OUTDIR/$HOST-sar-cpu.html

		cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 $HOST System Processor Charts</title>
</head>
<body>
<h1>Database Test 3 $HOST System Processor Charts</h1>
__EOF__

	local FILES=`ls $OUTDIR/$HOST/sar-cpu*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart="$HOST/`basename $chart`"
			cat << __EOF__ >> $HTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi
	cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__

		local HTMLFILE=$OUTDIR/$HOST-sar-blockdev.html

		cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 $HOST System Block Device Charts</title>
</head>
<body>
<h1>Database Test 3 $HOST System Block Device Charts</h1>
__EOF__

	local FILES=`ls $OUTDIR/$HOST/sar-blockdev*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart="$HOST/`basename $chart`"
			cat << __EOF__ >> $HTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi
	cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__

		local HTMLFILE=$OUTDIR/$HOST-sar-mem.html

		cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 $HOST System Memory Charts</title>
</head>
<body>
<h1>Database Test 3 $HOST System Memory Charts</h1>
__EOF__

	local FILES=`ls $OUTDIR/$HOST/sar-mem*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart="$HOST/`basename $chart`"
			cat << __EOF__ >> $HTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi
	cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__

		local HTMLFILE=$OUTDIR/$HOST-sar-swap.html

		cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 $HOST System Swap Charts</title>
</head>
<body>
<h1>Database Test 3 $HOST System Swap Charts</h1>
__EOF__

	local FILES=`ls $OUTDIR/$HOST/sar-swap*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart="$HOST/`basename $chart`"
			cat << __EOF__ >> $HTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi
	cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__

		local HTMLFILE=$OUTDIR/$HOST-sar-net.html

		cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 $HOST System Network Device Charts</title>
</head>
<body>
<h1>Database Test 3 $HOST System Network Device Charts</h1>
__EOF__

	local FILES=`ls $OUTDIR/$HOST/sar-net*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart="$HOST/`basename $chart`"
			cat << __EOF__ >> $HTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi
	cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__
	done
}

gen_results()
{
	local SUBDIR=$2

	local OUTDIR=$INDIR/$SUBDIR
	local SUBHTMLFILE=$OUTDIR/index.html

	if [ ! "x$MPP" = "xyes" ]; then
		make_db_charts $OUTDIR/db
		make_system_charts $OUTDIR
	else
		for NODE in `ls -d $OUTDIR/db/*/`; do
			make_db_charts $NODE
		done

		for HOSTNAME in $HOSTNAMES; do
			make_system_charts $OUTDIR/$HOSTNAME
		done
	fi

	cat << __EOF__ > $SUBHTMLFILE
<html>
<head>
<title>Database Test 3 $1 Details</title>
</head>
<body>

<h1>Database Test 3 $1 Details</h1>
<h2>Kernel and Application Profiles</h2>
<p>
__EOF__

	if [ -f "$OUTDIR/readprofile.txt" ]; then
		cat << __EOF__ >> $SUBHTMLFILE
<a href="readprofile.txt">readprofile</a><br />
__EOF__
	fi

	if [ -d "$OUTDIR/oprofile" ]; then
		cat << __EOF__ >> $SUBHTMLFILE
<a href="oprofile/oprofile.txt">oprofile</a><br />
<a href="oprofile/assembly.txt">annotated assembly</a><br />
__EOF__
	fi

	if [ -d "$OUTDIR/perf" ]; then
		if [ "x$SUBDIR" = "xpower" ]; then
			PERFFILE=$OUTDIR/perf/index.html
			cat << __EOF__ >> $SUBHTMLFILE
[<a href="perf/index.html">Linux Perf Data</a> ]
__EOF__
			write_perf_page $PERFFILE "Power Test"
		else
			if [ ! "x$MPP" = "xyes" ]; then
				cat << __EOF__ >> $SUBHTMLFILE
[Linux perf: <a href="perf/perf-report.txt.gz">report</a> |
<a href="perf/perf-annotate.txt.gz">annotated source</a> |
<a href="perf/perf-trace.txt.gz">trace</a>]
__EOF__
			else
				if [ "x$SUBDIR" = "xload" ]; then
					cat << __EOF__ >> $SUBHTMLFILE
<h3>Linux perf</h3>
<ul>
__EOF__

					for HOST in $HOSTNAMES; do
						cat << __EOF__ >> $SUBHTMLFILE
  <li>$HOST: <a href="perf/perf-report-$HOST.txt.gz">report</a> |
      <a href="perf/perf-annotate-$HOST.txt.gz">annotated source</a> |
      <a href="perf/perf-trace-$HOST.txt.gz">trace</a>
  </li>
__EOF__
					done

					cat << __EOF__ >> $SUBHTMLFILE
</ul>
__EOF__
				else
					cat << __EOF__ >> $SUBHTMLFILE
<p>
Not collected for multi-node databases systems.
</p>
__EOF__
				fi
			fi
		fi
	fi

	cat << __EOF__ >> $SUBHTMLFILE
</p>

<h2>Database Details</h2>
<h3>Logs</h3>
<ul>
__EOF__

	if [ "x$DATABASE" = "xpgxl" ]; then
		cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="gtm.log">GTM</a></li>
  <li><a href="coordinator">Coordinator</a></li>
  <li>
__EOF__
		for i in `seq 1 $NODE_COUNT`; do
			cat << __EOF__ >> $SUBHTMLFILE
    <a href="gtm_proxy_$i.log">GTM Proxy $i</a>
__EOF__
		done
		cat << __EOF__ >> $SUBHTMLFILE
  </li>
  <li>
__EOF__

		for i in `seq 1 $NODE_COUNT`; do
			cat << __EOF__ >> $SUBHTMLFILE
    <a href="datanode_$i.log">Datanode $i</a>
__EOF__
		done
		cat << __EOF__ >> $SUBHTMLFILE
  </li>
__EOF__
	else
		cat << __EOF__ >> $SUBHTMLFILE
<p>
<a href="dbt3.log">Log</a> |
<a href="param.txt">Parameters</a>
</p>
__EOF__
	fi

	cat << __EOF__ >> $SUBHTMLFILE
</ul>
__EOF__

	if [ "x$SUBDIR" = "xpower" ]; then
		if [ -f "$OUTDIR/disaster.csv" ]; then
			cat << __EOF__ >> $SUBHTMLFILE
| <a href="disaster.csv">Disaster Report</a>
__EOF__
		fi

		cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Query Plans</h3>
__EOF__
		i=1
		while [ $i -le 22 ]; do
			cat << __EOF__ >> $SUBHTMLFILE
<a href="plans/$i.txt">Q$i</a>
__EOF__
			i=$(( $i + 1 ))
		done

		cat << __EOF__ >> $SUBHTMLFILE
<h3>Query Results</h3>
__EOF__
		i=1
		while [ $i -le 22 ]; do
			cat << __EOF__ >> $SUBHTMLFILE
<a href="results/$i.txt">Q$i</a>
__EOF__
			i=$(( $i + 1 ))
		done
		if [ -f "$OUTDIR/results/rf1.txt" ]; then
			cat << __EOF__ >> $SUBHTMLFILE
<a href="results/rf1.txt">RF1</a>
__EOF__
		fi
		if [ -f "$OUTDIR/results/rf2.txt" ]; then
			cat << __EOF__ >> $SUBHTMLFILE
<a href="results/rf2.txt">RF2</a>
__EOF__
		fi

	fi

	if [ "x$SUBDIR" = "xthroughput" ]; then
		local DIRS=`ls -d $OUTDIR/results/*/ 2> /dev/null`

		cat << __EOF__ >> $SUBHTMLFILE
<h3>Stream Plans</h3>
<ol>
__EOF__
		for DIR in $DIRS; do
			local Q=`basename $DIR`
			cat << __EOF__ >> $SUBHTMLFILE
<li>
__EOF__

			i=1
			while [ $i -le 22 ]; do
				cat << __EOF__ >> $SUBHTMLFILE
<a href="plans/$Q/$i.txt">Q$i</a>
__EOF__
				i=$(( $i + 1 ))
			done

			cat << __EOF__ >> $SUBHTMLFILE
</li>
__EOF__
		done
		cat << __EOF__ >> $SUBHTMLFILE
</ol>
__EOF__

		cat << __EOF__ >> $SUBHTMLFILE
<h3>Stream Results</h3>
<ol>
__EOF__
		for DIR in $DIRS; do
			local S=`basename $DIR`
			cat << __EOF__ >> $SUBHTMLFILE
<li>
__EOF__

			i=1
			while [ $i -le 22 ]; do
				cat << __EOF__ >> $SUBHTMLFILE
<a href="results/$S/$i.txt">Q$i</a>
__EOF__
				i=$(( $i + 1 ))
			done
			if [ -f "$OUTDIR/results/$S/rf1.txt" ]; then
				cat << __EOF__ >> $SUBHTMLFILE
<a href="results/$S/rf1.txt">RF1</a>
__EOF__
			fi
			if [ -f "$OUTDIR/results/$S/rf2.txt" ]; then
				cat << __EOF__ >> $SUBHTMLFILE
<a href="results/$S/rf2.txt">RF2</a>
__EOF__
			fi

			cat << __EOF__ >> $SUBHTMLFILE
</li>
__EOF__
		done
		cat << __EOF__ >> $SUBHTMLFILE
</ol>
__EOF__

		# Just check the first stream to see if perf data exists since there
		# should always be at least 1 stream.
		if [ -d $OUTDIR/results/1/perf ]; then
			local DIRS=`ls -d $OUTDIR/results/* 2> /dev/null`

			if [ ! "x$MPP" = "xyes" ]; then
				cat << __EOF__ >> $SUBHTMLFILE
<h3>Stream Linux Perf Reports</h3>
__EOF__

				for DIR in $DIRS; do
					S=`basename $DIR`
					local PERFFILE=$OUTDIR/results/$S/perf/index.html

					write_perf_page $PERFFILE "Throughput Test Stream $S"
					cat << __EOF__ >> $SUBHTMLFILE
<a href="results/$S/perf/index.html">P$S</a>
__EOF__
				done
			fi
		fi

		local FILES=`ls $OUTDIR/results/*/disaster.csv 2> /dev/null`
		if [ $? -eq 0 ]; then
			cat << __EOF__ >> $SUBHTMLFILE
<h3>Stream Disaster Reports</h3>
__EOF__
			for FILE in $FILES; do
				local DIR=`dirname $FILE`
				local S=`basename $DIR`
				cat << __EOF__ >> $SUBHTMLFILE
<a href="results/$S/disaster.csv">S$S</a>
__EOF__
			done
		fi
	fi

	gen_system_chart_pages
	gen_db_chart_pages

	cat << __EOF__ >> $SUBHTMLFILE
<h2>Charts</h2>

<h3>Processor</h3>
<ul>
__EOF__

	for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="$HOST-sar-cpu.html">$HOST</a></li>
__EOF__
	done

	cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Block Devices</h3>
<ul>
__EOF__
	for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="$HOST-sar-blockdev.html">$HOST</a></li>
__EOF__
	done

	cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Memory</h3>
<ul>
__EOF__
	for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="$HOST-sar-mem.html">$HOST</a></li>
__EOF__
	done

	cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Swap</h3>
<ul>
__EOF__
	for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="$HOST-sar-swap.html">$HOST</a></li>
__EOF__
	done

	cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Network Devices</h3>
<ul>
__EOF__
	for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="$HOST-sar-net.html">$HOST</a></li>
__EOF__
	done

	cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Database</h3>
<ul>
__EOF__

	for HOST in $HOSTNAMES; do
			cat << __EOF__ >> $SUBHTMLFILE
  <li><a href="$HOST-db.html">$HOST</a></li>
__EOF__
	done

	cat << __EOF__ >> $SUBHTMLFILE
</ul>

<h3>Tables</h3>
__EOF__

	local FILES=`ls $OUTDIR/db/tables/*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="db/tables/$chart"><img src="db/tables/$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE
<h3>Indexes</h3>
__EOF__
	local FILES=`ls $OUTDIR/db/indexes/*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="db/indexes/$chart"><img src="db/indexes/$chart" width="100%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE
</body>
</html>
__EOF__
}

make_db_charts()
{
	local OUTDIR=`dirname $1`/`basename $1`

	if [ $FAST -eq 1 ]; then
		return 0
	fi

	if [ "x$DATABASE" = "xpgsql" ] || [ "x$DATABASE" = "xpgxl" ]; then
		if [ "x$DATABASE" = "xpgsql" ]; then
			local SARDIR="$OUTDIR"
		elif [ "x$DATABASE" = "xpgxl" ]; then
			local SARDIR="$OUTDIR/.."
		else
			echo "WARNING: Problem determining how to plot db stats"
			return
		fi

		dbt-pgsql-plot-database-stats $SARDIR/pg_stat_databases.csv $SARDIR \
				2>> $ERRLOG

		local OUTDIR=$SARDIR/tables
		mkdir -p $OUTDIR
		for table in `cat $SARDIR/table-list.txt`; do
			dbt-pgsql-plot-table-stats $SARDIR/pg_stat_tables.csv $table \
					$OUTDIR 2>> $ERRLOG
		done

		local OUTDIR=$SARDIR/indexes
		mkdir -p $OUTDIR
		for index in `cat $SARDIR/index-list.txt`; do
			dbt-pgsql-plot-index-stats $SARDIR/pg_stat_indexes.csv $index \
					$OUTDIR 2>> $ERRLOG
		done
	fi
}

make_system_charts()
{
	local SARDIR=$1

	if [ $FAST -eq 1 ]; then
		return 0
	fi

	dbt-plot-sar-cpu $SARDIR/sar-cpu.csv $SARDIR 2>> $ERRLOG
	dbt-plot-sar-blockdev $SARDIR/sar-blockdev.csv $SARDIR 2>> $ERRLOG
	dbt-plot-sar-mem $SARDIR/sar-mem2.csv $SARDIR 2>> $ERRLOG
	dbt-plot-sar-swap $SARDIR/sar-swap.csv $SARDIR 2>> $ERRLOG
	dbt-plot-sar-net $SARDIR/sar-net.csv $SARDIR 2>> $ERRLOG
}

# Use this to skip chart generation to help test just the HTML generation.
FAST=0
PLOT_OPTS=""
while getopts fi:o:V f; do
	case $f in
		f) FAST=1;;
		i) INDIR=$OPTARG;;
		o) OUTDIR=$OPTARG;;
		V) PLOT_OPTS="$PLOT_OPTS -V";;
		\?) exit 1;;
	esac
done

if [ -z $INDIR ]; then
	echo "Specify dbt3 results directory with -i"
	exit 1
fi

if [ -z "$OUTDIR" ]; then
	OUTDIR=$INDIR
fi

DATABASE=`grep "^dbms:" $INDIR/config.txt | cut -d " " -f 2`

ERRLOG="$OUTDIR/gen-report.txt"

OSVER=`grep "^kernel" $INDIR/config.txt | cut -d ' ' -f3-`
DBVER=`grep "^dbver" $INDIR/config.txt | cut -d " " -f2-`

CPU_MODEL=`grep "^model" $INDIR/config.txt | cut -d " " -f2-`
CPUS=`grep CPUS $INDIR/config.txt | awk '{print $2}'`
CPU_MHZ=`grep MHz $INDIR/config.txt | awk '{print $2}'`
HOSTNAMES=`grep "^hostnames:" $INDIR/config.txt | cut -d " " -f2-`
MPP=`grep "^mpp:" $INDIR/config.txt | cut -d " " -f 2`
NODES=`grep "^datanodes:" $INDIR/config.txt`
NODE_COUNT=`grep "^datanodes:" $INDIR/config.txt | cut -d " " -f 2`
RAM=`grep memory $INDIR/config.txt | awk '{print $2}'`

SF=`grep scale_factor $INDIR/config.txt | awk '{print $2}'`
STREAMS=`grep num_stream $INDIR/config.txt | awk '{print $2}'`

LOADDIR=$INDIR/load
if [ -d "$LOADDIR" ]; then
	LOAD=`grep LOAD $INDIR/q_time.csv | awk -F, '{ print $5 }'`
	# Round to 2 decimal places, convert to hours.
	LOAD_HOUR=`echo "scale=2; ${LOAD} / 3600" | bc -l`
	LOAD_MIN=`echo "scale=2; ${LOAD} / 60" | bc -l`
else
	LOAD=0
fi
METRICS="$INDIR/metrics.txt"
if [ -f "${METRICS}" ]; then
	COMPOSITE=`grep composite ${METRICS} | awk '{printf("%0.0f", $3)}'`
	POWER=`grep power ${METRICS} | awk '{printf("%0.0f", $3)}'`
	THROUGHPUT=`grep throughput ${METRICS} | awk '{print $3}'`
else
	COMPOSITE="N/A"
	POWER="N/A"
	THROUGHPUT="N/A"
fi

LOADPARAMS=`grep "^load_parameters" $INDIR/config.txt | cut -d " " -f2-`
POWERPARAMS=`grep "^power_parameters" $INDIR/config.txt | cut -d " " -f2-`
THRUPARAMS=`grep "^throughput_parameters" $INDIR/config.txt | cut -d " " -f2-`

# Generate individual Web pages for each test result directory.
if [ -d "$INDIR/load" ]; then
	gen_results "Load Test" "load"
	LOADLINK="<p><a href="load/index.html">Load Test Details</a></p>"
fi

POWERDIR="power"
THROUGHPUTDIR="throughput"

if [ -d "$INDIR/$POWERDIR" ]; then
	PLOT_OPTS="$PLOT_OPTS -2"
	gen_results "Power Test" $POWERDIR
	POWERLINK="<p><a href="$POWERDIR/index.html">Power Test Details</a></p>"
fi

if [ -d "$INDIR/$THROUGHPUTDIR" ]; then
	PLOT_OPTS="$PLOT_OPTS -3"
	gen_results "Throughput Test" $THROUGHPUTDIR
	THRULINK="<p><a href="$THROUGHPUTDIR/index.html">Throughput Test Details</a></p>"
fi

HTMLFILE=$INDIR/index.html

cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 Results</title>
</head>
<body>
<h1>Database Test 3 Results</h1>

<table border="1">
<tr>
<th>Software Version</th><th>Hardware Configuration</th><th>Workload Parameters</th>
</tr>
<tr>
<td>Operating System: $OSVER</td><td>$CPUS CPUs @ $CPU_MHZ</td><td>Scale Factor: $SF</td>
</tr>
<tr>
<td>Database Server: $DBVER</td><td>$CPU_MODEL</td><td>Streams: $STREAMS</td>
</tr>
<tr>
<td></td><td>$RAM KB RAM</td><td></td>
</tr>
<tr>
<td></td><td>$NODES</td><td></td>
</tr>
</table>

<h2>Metrics</h2>
<table border="0">

<tr>
<th></th>
<th></th>
<th>Runtime Parameters</th>
</tr>

<tr>
<td align="right">Composite:</td><td align="right">$COMPOSITE</td>
</tr>

<tr>
<td align="right">Load Time:</td>
<td align="right">$LOAD_MIN Minutes / $LOAD_HOUR Hours</td>
<td>$LOADLINK</td>
<td>$LOADPARAMS</td>
</tr>

<tr>
<td align="right">Query Processing Power:</td>
<td align="right">$POWER</td>
<td>$POWERLINK</td>
<td>$POWERPARAMS</td>
</tr>

<tr>
<td align="right">Throughput Numerical Quantity:</td>
<td align="right">$THROUGHPUT</td>
<td>$THRULINK</td>
<td>$THRUPARAMS</td>
</tr>
</table>
__EOF__

# Plot a query results
dbt3-plot-results -i $INDIR/q_time.csv -o $OUTDIR $PLOT_OPTS 2>> $ERRLOG \
		|| >&2 echo "Failed to plot query times..."

if [ -f "$INDIR/q_time.png" ]; then
	cat << __EOF__ >> $HTMLFILE
<h2>Query Times</h2>
<p>
(Click to view full size.)<br/>
<a href="q_time.png"><img src="q_time.png" width="100%" /></a><br/>
<a href="q_time.csv">CSV Version</a>
</p>
__EOF__
fi

cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__
