#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2005-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.

DIR=`dirname $0`
. ${DIR}/dbt3_profile || exit 1

if [ $# -ne 1 ]; then
	echo "usage: $0 <results directory>"
	exit;
fi

RESULT_PATH=$1

SRCDIR=${DBT3_HOME}
DBDIR=$SRCDIR/scripts/${DATABASE}

OSVER=`uname -s -r`
DBVER=`$DBDIR/dbt3-${DATABASE}-get-version`

CPU_MODEL=`uname -p`
CPUS=`grep CPUS ${RESULT_PATH}/config.txt | awk '{print $2}'`
CPU_MHZ=`grep MHz ${RESULT_PATH}/config.txt | awk '{print $2}'`
RAM=`grep memory ${RESULT_PATH}/config.txt | awk '{print $2}'`

SF=`grep scale_factor ${RESULT_PATH}/config.txt | awk '{print $2}'`
STREAMS=`grep num_stream ${RESULT_PATH}/config.txt | awk '{print $2}'`

if [ -d "${RESULT_PATH}/load" ]; then
	LOAD=`grep LOAD ${RESULT_PATH}/q_time.csv | awk -F, '{ print $5 }'`
	# Round to 2 decimal places, convert to hours.
	LOAD=`echo "scale=2; ${LOAD} / 3600" | bc -l`
else
	LOAD=0
fi
if [ -f ${RESULT_PATH}/calc_composite.out ]; then
	COMPOSITE=`grep composite ${RESULT_PATH}/calc_composite.out | awk '{printf("%0.0f", $3)}'`
	POWER=`grep power ${RESULT_PATH}/calc_composite.out | awk '{printf("%0.0f", $3)}'`
	THROUGHPUT=`grep throughput ${RESULT_PATH}/calc_composite.out | awk '{print $3}'`
else
	COMPOSITE="N/A"
	POWER="N/A"
	THROUGHPUT="N/A"
fi

gen_results()
{
	SUBDIR=$2

	echo "<html>" > ${SUBDIR}/index.html
	echo "<head>" >> ${SUBDIR}/index.html
	echo "<title>Database Test 3 $1 Results</title>" >> ${SUBDIR}/index.html
	echo "</head>" >> ${SUBDIR}/index.html
	echo "<body>" >> ${SUBDIR}/index.html

	echo "<img src=\"sar-cpu.png\" />" >> ${SUBDIR}/index.html
	echo "<p>" >> ${SUBDIR}/index.html
	echo "</p>" >> ${SUBDIR}/index.html

	echo "<h2>Kernel and Application Profiles</h2>" >> ${SUBDIR}/index.html
	echo "<p>"
	if [ -f "${SUBDIR}/readprofile.txt" ]; then
		echo "<a href=\"readprofile.txt\">readprofile</a><br />" >> ${SUBDIR}/index.html
	fi
	if [ -d "${SUBDIR}/oprofile" ]; then
		echo "<a href=\"oprofile/oprofile.txt\">oprofile</a><br />" >> ${SUBDIR}/index.html
		echo "<a href=\"oprofile/assembly.txt\">annotated assembly</a><br />" >> ${SUBDIR}/index.html
	fi
	echo "</p>" >> ${SUBDIR}/index.html

	echo "<h2>Database Information</h2>" >> ${SUBDIR}/index.html
	echo "<a href=\"param.txt\">database parameters</a><br />" >> ${SUBDIR}/index.html
	echo "<a href=\"db/\">database raw statistics</a><br />" >> ${SUBDIR}/index.html
	if [ "$1" != "Load Test" ]; then
		echo "<a href=\"db/index.csv\">table indexes</a><br />" >> ${SUBDIR}/index.html
		echo "<a href=\"db/plans\">query plans</a><br />" >> ${SUBDIR}/index.html
		echo "<a href=\"results\">query results</a><br />" >> ${SUBDIR}/index.html
	fi

	echo "</body>" >> ${SUBDIR}/index.html
	echo "</html>" >> ${SUBDIR}/index.html

	dbt-plot-sar-blockdev ${SUBDIR}/sar-blockdev.csv ${SUBDIR}
	dbt-plot-sar-cpu ${SUBDIR}/sar-cpu.csv ${SUBDIR}

	dbt-pgsql-plot-database-stats ${SUBDIR}/db/pg_stat_databases.csv ${DBNAME} \
			${SUBDIR}/db
	mkdir -p ${SUBDIR}/db/tables
	for TABLENAME in `cat ${SUBDIR}/db/table-list.txt`; do
		dbt-pgsql-plot-table-stats ${SUBDIR}/db/pg_stat_tables.csv \
				${TABLENAME} ${SUBDIR}/db/tables
	done

	mkdir -p ${SUBDIR}/db/indexes
	for INDEXNAME in `cat ${SUBDIR}/db/index-list.txt`; do
		dbt-pgsql-plot-index-stats ${SUBDIR}/db/pg_stat_indexes.csv \
				${INDEXNAME} ${SUBDIR}/db/indexes
	done
}

echo "<html>"
echo "<head>"
echo "<title>Database Test 3 Results</title>"
echo "</head>"
echo "<body>"
echo "<h1>Database Test 3 Results</h1>"

echo "<table border=\"1\">"
echo "<tr>"
echo "<th>Software Version</th><th>Hardware Configuration</th><th>Workload Parameters</th>"
echo "</tr>"
echo "<tr>"
echo "<td>Operating System: ${OSVER}</td><td>${CPUS} CPUs @ ${CPU_MHZ}</td><td>Scale Factor: ${SF}</td>"
echo "</tr>"
echo "<tr>"
echo "<td>Database Server: ${DBVER}</td><td>${CPU_MODEL}</td><td>Streams: ${STREAMS}</td>"
echo "</tr>"
echo "<tr>"
echo "<td></td><td>${RAM} KB RAM</td><td></td>"
echo "</tr>"
echo "</table>"

echo "<h2>Metrics</h2>"
echo "<table border=\"0\">"
echo "<tr>"
echo "<td align=\"right\">Composite:</td><td align=\"right\">${COMPOSITE}</td>"
echo "</tr>"
echo "<tr>"
echo "<td align=\"right\">Load Time:</td><td align=\"right\">${LOAD} Hours</td>"
echo "</tr>"
echo "<tr>"
echo "<td align=\"right\">Query Processing Power:</td><td align=\"right\">${POWER}</td>"
echo "</tr>"
echo "<tr>"
echo "<td align=\"right\">Throughput Numerical Quantity:</td><td align=\"right\">${THROUGHPUT}</td>"
echo "</tr>"
echo "</table>"

if [ -f "${RESULT_PATH}/q_time.png" ]; then
	echo "<h2>Query Times</h2>"
	echo "<img src=\"q_time.png\" />"
	echo "<p>"
	echo "<a href=\"q_time.csv\">Text Version of Chart</a>"
	echo "</p>"
fi

# Generate individual Web pages for each test result directory.
echo "<h2>Individual Test Results</h2>"

cd ${RESULT_PATH}

#
# There will only be 1 load test if any.
#
if [ -d "${RESULT_PATH}/load" ]; then
	gen_results "Load Test" "load"
	echo "<p>"
	echo "<a href=\"load/index.html\">Load Test</a>"
	echo "</p>"
fi

echo "<p>"
#
# There can be multiple power* and throughput* test directories and I don't
# know how to test for that without doing the ls.  So we're going to have
# to live with "No such file or directory" messages if they don't exists.
#
i=1
for ARG in `ls -d power*`
do
	gen_results "Power Test" $ARG
	echo "<a href=\"$ARG/index.html\">Power Test ${i}</a>"
	let "i=$i+1"
done
echo "</p>"

echo "<p>"
i=1
for ARG in `ls -d throughput*`
do
	gen_results "Throughput Test" $ARG
	echo "<a href=\"$ARG/index.html\">Throughput Test ${i}</a>"
	let "i=$i+1"
done
echo "</p>"

echo "</body>"
echo "</html>"
