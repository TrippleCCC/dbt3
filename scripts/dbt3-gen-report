#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2005-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.

gen_results()
{
	local SUBDIR=$2
	local OUTDIR=$INDIR/$SUBDIR
	local SUBHTMLFILE=$OUTDIR/index.html

	make_charts $OUTDIR

	cat << __EOF__ > $SUBHTMLFILE
<html>
<head>
<title>Database Test 3 $1 Details</title>
</head>
<body>

<h1>Kernel and Application Profiles</h1>
<p>
__EOF__

	if [ -f "$OUTDIR/readprofile.txt" ]; then
		cat << __EOF__ >> $SUBHTMLFILE
<a href="readprofile.txt">readprofile</a><br />
__EOF__
	fi

	if [ -d "$OUTDIR/oprofile" ]; then
		cat << __EOF__ >> $SUBHTMLFILE
<a href="oprofile/oprofile.txt">oprofile</a><br />
<a href="oprofile/assembly.txt">annotated assembly</a><br />
__EOF__
	fi

	if [ -d "$OUTDIR/perf" ]; then
		if [ "x$SUBDIR" = "xpower" ]; then
			cat << __EOF__ >> $SUBHTMLFILE
[<a href="perf">Linux Perf Data</a> ]
__EOF__
		else
			cat << __EOF__ >> $SUBHTMLFILE
[Linux perf: <a href="perf/perf-report.txt">report</a> |
<a href="perf/perf-annotate.txt">annotated source</a> |
<a href="perf/perf-trace.txt">trace</a>]
__EOF__
		fi
	fi

	cat << __EOF__ >> $SUBHTMLFILE
</p>

<h1>Database Details</h1>
<a href="param.txt">Parameters</a>
__EOF__

	if [ "$1" != "Load Test" ]; then
		cat << __EOF__ >> $SUBHTMLFILE
| <a href="plans">Query Plans</a>
| <a href="results">Query Results</a>
__EOF__
	fi

	cat << __EOF__ >> $SUBHTMLFILE
<h1>Charts</h1>

<h2>Processor</h2>
__EOF__

	local FILES=`ls $OUTDIR/sar-cpu*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="50%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE
<h2>Block Devices</h2>
__EOF__

	local FILES=`ls $OUTDIR/sar-blockdev-*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="$chart"><img src="$chart" width="50%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE

<h2>Database</h2>
__EOF__
	local FILES=`ls $OUTDIR/db/db-stat-dbt3-*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="db/$chart"><img src="db/$chart" width="50%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE
<h2>Tables</h2>
__EOF__

	local FILES=`ls $OUTDIR/db/tables/*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="db/tables/$chart"><img src="db/tables/$chart" width="50%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE
<h2>Indexes</h2>
__EOF__
	local FILES=`ls $OUTDIR/db/indexes/*.png 2> /dev/null`
	if [ -n "$FILES" ]; then
		for chart in $FILES; do
			chart=`basename $chart`
			cat << __EOF__ >> $SUBHTMLFILE
<p>
$chart<br/>
<a href="db/indexes/$chart"><img src="db/indexes/$chart" width="50%" /></a>
</p>
__EOF__
		done
	fi

	cat << __EOF__ >> $SUBHTMLFILE
</body>
</html>
__EOF__
}

make_charts()
{
	local SARDIR=$1

	if [ $FAST -eq 1 ]; then
		return 0
	fi

	dbt-plot-sar-cpu $SARDIR/sar-cpu.csv $SARDIR 2>> $ERRLOG
	dbt-plot-sar-blockdev $SARDIR/sar-blockdev.csv $SARDIR 2>> $ERRLOG

	local DBDIR=$SARDIR/db
	if [ "x$DATABASE" = "xpgsql" ]; then
		dbt-pgsql-plot-database-stats $DBDIR/pg_stat_databases.csv $DBDIR \
				2>> $ERRLOG

		local OUTDIR=$DBDIR/tables
		mkdir -p $OUTDIR
		for table in `cat $DBDIR/table-list.txt`; do
			dbt-pgsql-plot-table-stats $DBDIR/pg_stat_tables.csv $table \
					$OUTDIR 2>> $ERRLOG
		done

		local OUTDIR=$DBDIR/indexes
		mkdir -p $OUTDIR
		for index in `cat $DBDIR/index-list.txt`; do
			dbt-pgsql-plot-index-stats $DBDIR/pg_stat_indexes.csv $index \
					$OUTDIR 2>> $ERRLOG
		done
	fi
}

# Use this to skip chart generation to help test just the HTML generation.
FAST=0
PLOT_OPTS=""
while getopts fi:o: f; do
	case $f in
		f) FAST=1;;
		i) INDIR=$OPTARG;;
		o) OUTDIR=$OPTARG;;
		\?) usage; exit 1;;
	esac
done

if [ -z $INDIR ]; then
	echo "Specify dbt3 results directory with -i"
	usage
	exit 1
fi

if [ -z "$OUTDIR" ]; then
	OUTDIR=$INDIR
fi

ERRLOG="$OUTDIR/gen-report.txt"

OSVER=`grep "^kernel" $INDIR/config.txt | cut -d ' ' -f3-`
DBVER=`grep "^dbver" $INDIR/config.txt | cut -d " " -f2-`

CPU_MODEL=`grep "^model" $INDIR/config.txt | cut -d " " -f2-`
CPUS=`grep CPUS $INDIR/config.txt | awk '{print $2}'`
CPU_MHZ=`grep MHz $INDIR/config.txt | awk '{print $2}'`
RAM=`grep memory $INDIR/config.txt | awk '{print $2}'`

SF=`grep scale_factor $INDIR/config.txt | awk '{print $2}'`
STREAMS=`grep num_stream $INDIR/config.txt | awk '{print $2}'`

LOADDIR=$INDIR/load
if [ -d "$LOADDIR" ]; then
	LOAD=`grep LOAD $INDIR/q_time.csv | awk -F, '{ print $5 }'`
	# Round to 2 decimal places, convert to hours.
	LOAD_HOUR=`echo "scale=2; ${LOAD} / 3600" | bc -l`
	LOAD_MIN=`echo "scale=2; ${LOAD} / 60" | bc -l`
else
	LOAD=0
fi
METRICS="$INDIR/metrics.txt"
if [ -f "${METRICS}" ]; then
	COMPOSITE=`grep composite ${METRICS} | awk '{printf("%0.0f", $3)}'`
	POWER=`grep power ${METRICS} | awk '{printf("%0.0f", $3)}'`
	THROUGHPUT=`grep throughput ${METRICS} | awk '{print $3}'`
else
	COMPOSITE="N/A"
	POWER="N/A"
	THROUGHPUT="N/A"
fi


# Generate individual Web pages for each test result directory.
if [ -d "$INDIR/load" ]; then
	gen_results "Load Test" "load"
	LOADLINK="<p><a href="load/index.html">Load Test Details</a></p>"
fi

POWERDIR="power"
THROUGHPUTDIR="throughput"

if [ -d "$INDIR/$POWERDIR" ]; then
	PLOT_OPTS="$PLOT_OPTS -2"
	gen_results "Power Test" $POWERDIR
	POWERLINK="<p><a href="$POWERDIR/index.html">Power Test Details</a></p>"
fi

if [ -d "$INDIR/$THROUGHPUTDIR" ]; then
	PLOT_OPTS="$PLOT_OPTS -3"
	gen_results "Throughput Test" $THROUGHPUTDIR
	THRULINK="<p><a href="$THROUGHPUTDIR/index.html">Throughput Test Details</a></p>"
fi

HTMLFILE=$INDIR/index.html

cat << __EOF__ > $HTMLFILE
<html>
<head>
<title>Database Test 3 Results</title>
</head>
<body>
<h1>Database Test 3 Results</h1>

<table border="1">
<tr>
<th>Software Version</th><th>Hardware Configuration</th><th>Workload Parameters</th>
</tr>
<tr>
<td>Operating System: $OSVER</td><td>$CPUS CPUs @ $CPU_MHZ</td><td>Scale Factor: $SF</td>
</tr>
<tr>
<td>Database Server: $DBVER</td><td>$CPU_MODEL</td><td>Streams: $STREAMS</td>
</tr>
<tr>
<td></td><td>$RAM KB RAM</td><td></td>
</tr>
</table>

<h2>Metrics</h2>
<table border="0">

<tr>
<td align="right">Composite:</td><td align="right">$COMPOSITE</td>
</tr>

<tr>
<td align="right">Load Time:</td>
<td align="right">$LOAD_MIN Minutes / $LOAD_HOUR Hours</td>
<td>$LOADLINK</td>
</tr>

<tr>
<td align="right">Query Processing Power:</td>
<td align="right">$POWER</td>
<td>$POWERLINK</td>
</tr>

<tr>
<td align="right">Throughput Numerical Quantity:</td>
<td align="right">$THROUGHPUT</td>
<td>$THRULINK</td>
</tr>
</table>
__EOF__

# Plot a query results
dbt3-plot-results -i $INDIR/q_time.csv -o $OUTDIR $PLOT_OPTS 2>> $ERRLOG \
		|| >&2 echo "Failed to plot query times..."

if [ -f "$INDIR/q_time.png" ]; then
	cat << __EOF__ >> $HTMLFILE
<h2>Query Times</h2>
<p>
(Click to view full size.)<br/>
<a href="q_time.png"><img src="q_time.png" width="50%" /></a><br/>
<a href="q_time.csv">CSV Version</a>
</p>
__EOF__
fi

cat << __EOF__ >> $HTMLFILE
</body>
</html>
__EOF__
